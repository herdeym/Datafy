#pragma checksum "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\Pages\Artist.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d19b7a2b5774ab65d4f2ababe8baadd2f06d57fe"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DataSpotify.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using DataSpotify;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using DataSpotify.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\_Imports.razor"
using DevExpress.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\Pages\Artist.razor"
using Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\Pages\Artist.razor"
using SpotifyAPI.Web.Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/artist/{id}")]
    public partial class Artist : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 111 "E:\BME\onlab_working\onlab\DS 3_2 másolata\DataSpotify\DataSpotify\Pages\Artist.razor"
       
    [Parameter]
    public string ID { get; set; }

    class ActivityItem
    {
        public string Year { get; set; }
        public int Count { get; set; }
    }

    FullArtist artist;
    string name = "";
    string artistImg = "";
    string albumImg = "";
    SeveralTracks toptracks;
    IEnumerable<FullTrack> topTracks;
    Paging<SimpleAlbum> albums;
    IEnumerable<SimpleAlbum> simpleAlbums;
    SimpleAlbum selectedAlbum;
    SeveralArtists related;
    IEnumerable<FullArtist> relatedArtists;
    IEnumerable<SimpleTrack> albumTracks;
    bool moreDiscs = false;
    bool activitiesLoaded = false;
    List<ActivityItem> activities = new List<ActivityItem>();



    protected override async Task OnInitializedAsync()
    {
        if (!api.IsAuthenticated())
        {
            string at = await localStorage.GetItemAsync<string>("AccessToken");
            string tt = await localStorage.GetItemAsync<string>("TokenType");
            await api.Authenticate(at, tt);
        }

        await LoadArtist();
    }

    public async Task GetAlbumTracks(SimpleAlbum album)
    {
        selectedAlbum = album;
        FullAlbum temp = await API.S.GetAlbumAsync(album.Id);

        if (temp.Images.Count() == 0)
            albumImg = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/1200px-No_image_available.svg.png";
        else
            albumImg = temp.Images.First().Url;
        albumTracks = temp.Tracks.Items.ToList();
        bool onlyOneDisc = true;
        foreach (var t in albumTracks)
        {
            if (t.DiscNumber > 1)
                onlyOneDisc = false;
        }
        if (!onlyOneDisc)
            moreDiscs = true;
        else
            moreDiscs = false;
    }

    public async Task LoadArtist()
    {
        //activities.Clear();
        artist = await API.S.GetArtistAsync(ID);
        name = artist.Name;
        if (artist.Images.Count() == 0)
            artistImg = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/1200px-No_image_available.svg.png";
        else
            artistImg = artist.Images.First().Url;
        toptracks = await API.S.GetArtistsTopTracksAsync(ID, "HU");
        topTracks = toptracks.Tracks;
        albums = await API.S.GetArtistsAlbumsAsync(ID, SpotifyAPI.Web.Enums.AlbumType.Some, 50, 0, "HU");
        simpleAlbums = albums.Items.ToList();
        await GetAlbumTracks(simpleAlbums.First());

        foreach (var album in albums.Items)
        {
            activities.Add(new ActivityItem
            {
                Count = album.TotalTracks,
                Year = album.ReleaseDate
            });


        }
        activities = activities.OrderBy(a => a.Year).ToList();
        //Console.WriteLine(activities.Count());
        activitiesLoaded = true;
        /*foreach (var a in activities)
        {
            Console.WriteLine(a.Year);
        }*/

        related = await API.S.GetRelatedArtistsAsync(artist.Id);
        relatedArtists = related.Artists;
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadArtist();
        this.StateHasChanged();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager nm { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService localStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private API api { get; set; }
    }
}
#pragma warning restore 1591
